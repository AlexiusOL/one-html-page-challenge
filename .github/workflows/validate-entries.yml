name: Validate One HTML Page Challenge Entries

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test'
        required: true
        type: number
      dry_run:
        description: 'Dry run - skip commenting on PR'
        required: false
        type: boolean
        default: false

jobs:
  validate-entries:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/pull/{0}/merge', github.event.inputs.pr_number) || github.ref }}
    
    - name: Check if only entries files changed
      id: check-files
      run: |
        # Get all changed files
        changed_files=$(git diff --name-only HEAD~1 HEAD)
        echo "All changed files:"
        echo "$changed_files"
        
        # Check if all changed files are in allowed paths
        allowed=true
        while IFS= read -r file; do
          if [[ ! "$file" =~ ^entries/ ]] && [[ "$file" != "entries.js" ]]; then
            echo "‚ùå Non-entries file found: $file"
            allowed=false
          fi
        done <<< "$changed_files"
        
        if [ "$allowed" = true ]; then
          echo "‚úÖ All changed files are entries-related"
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "üö´ PR contains non-entries changes, skipping validation"
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Node.js
      if: steps.check-files.outputs.should_run == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    
    - name: Install dependencies
      if: steps.check-files.outputs.should_run == 'true'
      run: |
        npm install jsdom cheerio
    
    - name: Get changed files
      if: steps.check-files.outputs.should_run == 'true'
      id: changed-files
      run: |
        echo "files=$(git diff --name-only HEAD~1 HEAD | grep -E '^entries/.*\.html?$|^entries\.js$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
    
    - name: Run validation script
      if: steps.check-files.outputs.should_run == 'true'
      run: node .github/scripts/validate-entries.js
      env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.files }}
    
    - name: Comment on PR
      uses: actions/github-script@v7
      if: (success() || failure()) && steps.check-files.outputs.should_run == 'true' && github.event.inputs.dry_run != 'true'
      with:
        script: |
          const fs = require('fs');
          let results = {};
          let hasErrors = false;
          
          if (fs.existsSync('validation-results.json')) {
            results = JSON.parse(fs.readFileSync('validation-results.json', 'utf8'));
            hasErrors = Object.values(results).some(issues => issues.length > 0);
          }
          
          // Determine overall status
          const status = hasErrors ? 'üö´ Entry Validation Failed' : '‚úÖ Entry Validation Passed';
          let comment = `## ${status}\n\n`;
          
          // Add requirements checklist
          comment += '### Requirements Checklist:\n\n';
          
          // Check each requirement across all files
          let fileSizePass = true;
          let htmlStructurePass = true;
          let noExternalImportsPass = true;
          let noNetworkRequestsPass = true;
          let htmlSyntaxPass = true;
          let entryRegisteredPass = true;
          
          for (const [file, issues] of Object.entries(results)) {
            issues.forEach(issue => {
              if (issue.includes('File size') && issue.includes('exceeds')) fileSizePass = false;
              if (issue.includes('File must have') || issue.includes('HTML structure')) htmlStructurePass = false;
              if (issue.includes('External') && (issue.includes('stylesheet') || issue.includes('script') || issue.includes('image') || issue.includes('resource'))) noExternalImportsPass = false;
              if (issue.includes('network request')) noNetworkRequestsPass = false;
              if (issue.includes('HTML syntax') || issue.includes('Unclosed')) htmlSyntaxPass = false;
              if (issue.includes('Entry not found') || issue.includes('entries.js')) entryRegisteredPass = false;
            });
          }
          
          comment += `- ${fileSizePass ? '‚úÖ' : '‚ùå'} File must be less than 1MB\n`;
          comment += `- ${htmlStructurePass ? '‚úÖ' : '‚ùå'} Valid HTML file structure\n`;
          comment += `- ${noExternalImportsPass ? '‚úÖ' : '‚ùå'} No external file imports (images, CSS, JS)\n`;
          comment += `- ${noNetworkRequestsPass ? '‚úÖ' : '‚ùå'} No network requests\n`;
          comment += `- ${htmlSyntaxPass ? '‚úÖ' : '‚ùå'} Valid HTML syntax\n`;
          comment += `- ${entryRegisteredPass ? '‚úÖ' : '‚ùå'} Entry registered in entries.js\n\n`;
          
          // Add detailed issues if any exist
          if (hasErrors) {
            comment += '### Issues Found:\n\n';
            for (const [file, issues] of Object.entries(results)) {
              if (issues.length > 0) {
                comment += `**${file}:**\n`;
                issues.forEach(issue => {
                  comment += `- ${issue}\n`;
                });
                comment += '\n';
              }
            }
            comment += 'Please fix the issues above and update your pull request.';
          } else {
            comment += 'All entries meet the One HTML Page Challenge requirements! üéâ';
          }
          
          // Determine which PR to comment on
          const issueNumber = context.issue.number || '${{ github.event.inputs.pr_number }}';
          
          github.rest.issues.createComment({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 